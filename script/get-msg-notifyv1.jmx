<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="2.9" jmeter="3.0 r1743807">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="测试计划" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="首页，查看消息通知" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="循环控制器" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1597563663000</longProp>
        <longProp name="ThreadGroup.end_time">1597563663000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="察看结果树" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>true</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="访问信息设置" enabled="true">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding">UTF-8</stringProp>
          <stringProp name="filename">../csv/picc_s.csv</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="variableNames">ip</stringProp>
        </CSVDataSet>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">sid-in-header</stringProp>
              <stringProp name="Header.value">1</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">unique_id</stringProp>
              <stringProp name="Header.value">034c2c052e3c0d0c</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">app_version</stringProp>
              <stringProp name="Header.value">300</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">openid</stringProp>
              <stringProp name="Header.value">5e11b5e9-4eb2-3e97-8aca-6d287f097c52</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">os_version</stringProp>
              <stringProp name="Header.value">27</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">system_name</stringProp>
              <stringProp name="Header.value">Android</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">serial_number</stringProp>
              <stringProp name="Header.value">CLB0218807006723</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">test</stringProp>
              <stringProp name="Header.value">123</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="路径变量" enabled="true">
          <stringProp name="BeanShellSampler.query">//String Srcpath = vars.get(&quot;SrcPath&quot;);
//vars.put(&quot;path&quot;,Srcpath+&quot;/lifeapp-uic/api/user/login-bind-by-password&quot;);
vars.put(&quot;path&quot;,&quot;/portal-web/api/msg-notify/get-msg-notify/v1&quot;);

</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="数据库连接" enabled="true">
          <stringProp name="IncludeController.includepath">./picc_s.jmx</stringProp>
        </IncludeController>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="正常" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="首页，查看消息通知" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;classification_code&quot;:&quot;00201&quot;,&#xd;
	&quot;city_name&quot;:&quot;北京市&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ip}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">${path}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="3373707">name</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="返回结果解析" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import com.alibaba.fastjson.JSONObject;

String response_data = prev.getResponseDataAsString(); //获取请求返回值。注意此处只能获取到String类型;
log.info(&quot;response_data=&quot;+response_data);
JSONObject data_obj = JSONObject.parseObject(response_data); //将String类型的返回值构造成JSONObject对象,才可使用Java对象的方法对其进行操作;</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="查询对应数据库返回数据" enabled="false">
              <stringProp name="dataSource">checkbiz</stringProp>
              <stringProp name="query">SELECT * FROM prp_lthird_party WHERE regist_no=&apos;${registNo}&apos;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout">180</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable">prp_Lthird_Party</stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCPostProcessor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="校验返回结果和数据库结果是否一致" enabled="false">
              <stringProp name="BeanShellAssertion.query">import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSON;

String status = vars.get(&quot;status&quot;);
String statusText = vars.get(&quot;statusText&quot;);
log.info(&quot;status=&quot;+status);
log.info(&quot;statusText=&quot;+statusText);

if(!status.equals(&quot;0&quot;)){
	Failure = true;
	FailureMessage = &quot;返回状态码错误！&quot;;
	log.info(&quot;返回状态码错误,status:&quot;+status);
}
if(!statusText.equals(&quot;Success&quot;)){
	Failure = true;
	FailureMessage = &quot;返回状态信息错误！&quot;;
	log.info(&quot;返回状态信息错误,statusText:&quot;+statusText);
}

String data = vars.get(&quot;data&quot;);//报文中的data
log.info(&quot;报文中的data=&quot;+data);

JSONArray prpLthirdParty = JSONArray.parseArray(data);//报文中的prpLthirdParty
log.info(&quot;报文中的prpLthirdParty=&quot;+prpLthirdParty);
log.info(&quot;报文中的prpLthirdParty数量=&quot;+prpLthirdParty.size());

JSONArray prp_Lthird_Party = new JSONArray(vars.getObject(&quot;prp_Lthird_Party&quot;)); //数据库中的prp_Lthird_Party
log.info(&quot;数据库中的prp_Lthird_Party=&quot;+prp_Lthird_Party);
log.info(&quot;数据库中的prp_Lthird_Party数量=&quot;+prp_Lthird_Party.size());

if(prp_Lthird_Party.size()!=prpLthirdParty.size()){
	log.info(&quot;数据库中的prp_Lthird_Party数量与报文中的prpLthirdParty数量不相等,prp_Lthird_Party.size=&quot;+prp_Lthird_Party.size()+&quot;prpLthirdParty.size=&quot;+prpLthirdParty.size());
}else{
	for(int i=0;i&lt;prp_Lthird_Party.size();i++){
		if(prpLthirdParty.get(0).get(&quot;thirdpartyId&quot;)!=null &amp;&amp; prp_Lthird_Party.get(0).get(&quot;id&quot;)!=null){
			if(!(prpLthirdParty.get(0).get(&quot;thirdpartyId&quot;).equals(prp_Lthird_Party.get(0).get(&quot;id&quot;)))){
//				Failure = true;
//				FailureMessage = &quot;返回报文中的 id 与数据库不一致！&quot;;
				log.info(&quot;返回报文中的 id 与数据库不一致&quot;);
			}else{
				if(prpLthirdParty.get(0).get(&quot;registNo&quot;)!=null &amp;&amp; prp_Lthird_Party.get(0).get(&quot;regist_no&quot;)!=null){
					if(!(prpLthirdParty.get(0).get(&quot;registNo&quot;).equals(prp_Lthird_Party.get(0).get(&quot;regist_no&quot;)))){
						Failure = true;
						FailureMessage = &quot;返回报文中的 报案号registNo 与数据库不一致！&quot;;
						log.info(&quot;返回报文中的 报案号registNo 与数据库不一致&quot;);
					}
				}
				if(prpLthirdParty.get(0).get(&quot;lossItemType&quot;)!=null &amp;&amp; prp_Lthird_Party.get(0).get(&quot;loss_item_type&quot;)!=null){
					if(!(prpLthirdParty.get(0).get(&quot;lossItemType&quot;).equals(prp_Lthird_Party.get(0).get(&quot;loss_item_type&quot;)))){
						Failure = true;
						FailureMessage = &quot;返回报文中的 损失项目类型lossItemType 与数据库不一致！&quot;;
						log.info(&quot;返回报文中的 损失项目类型lossItemType 与数据库不一致&quot;);
					}
				}
				if(prpLthirdParty.get(0).get(&quot;licenseNo&quot;)!=null &amp;&amp; prp_Lthird_Party.get(0).get(&quot;license_no&quot;)!=null){
					if(!(prpLthirdParty.get(0).get(&quot;licenseNo&quot;).equals(prp_Lthird_Party.get(0).get(&quot;license_no&quot;)))){
						Failure = true;
						FailureMessage = &quot;返回报文中的 车牌号licenseNo 与数据库不一致！&quot;;
						log.info(&quot;返回报文中的 车牌号licenseNo 与数据库不一致&quot;);
					}
				}
			}
		}
	}
}

</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="异常" enabled="false"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="首页，查看消息通知" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ip}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">${path}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="3373707">name</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="返回结果解析" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import com.alibaba.fastjson.JSONObject;

String response_data = prev.getResponseDataAsString(); //获取请求返回值。注意此处只能获取到String类型;
log.info(&quot;response_data=&quot;+response_data);
JSONObject data_obj = JSONObject.parseObject(response_data); //将String类型的返回值构造成JSONObject对象,才可使用Java对象的方法对其进行操作;</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="查询对应数据库返回数据" enabled="false">
              <stringProp name="dataSource">checkbiz</stringProp>
              <stringProp name="query">SELECT * FROM prp_lthird_party WHERE regist_no=&apos;${registNo}&apos;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout">180</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable">prp_Lthird_Party</stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCPostProcessor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="校验返回结果和数据库结果是否一致" enabled="false">
              <stringProp name="BeanShellAssertion.query">import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSON;

String status = vars.get(&quot;status&quot;);
String statusText = vars.get(&quot;statusText&quot;);
log.info(&quot;status=&quot;+status);
log.info(&quot;statusText=&quot;+statusText);

if(!status.equals(&quot;0&quot;)){
	Failure = true;
	FailureMessage = &quot;返回状态码错误！&quot;;
	log.info(&quot;返回状态码错误,status:&quot;+status);
}
if(!statusText.equals(&quot;Success&quot;)){
	Failure = true;
	FailureMessage = &quot;返回状态信息错误！&quot;;
	log.info(&quot;返回状态信息错误,statusText:&quot;+statusText);
}

String data = vars.get(&quot;data&quot;);//报文中的data
log.info(&quot;报文中的data=&quot;+data);

JSONArray prpLthirdParty = JSONArray.parseArray(data);//报文中的prpLthirdParty
log.info(&quot;报文中的prpLthirdParty=&quot;+prpLthirdParty);
log.info(&quot;报文中的prpLthirdParty数量=&quot;+prpLthirdParty.size());

JSONArray prp_Lthird_Party = new JSONArray(vars.getObject(&quot;prp_Lthird_Party&quot;)); //数据库中的prp_Lthird_Party
log.info(&quot;数据库中的prp_Lthird_Party=&quot;+prp_Lthird_Party);
log.info(&quot;数据库中的prp_Lthird_Party数量=&quot;+prp_Lthird_Party.size());

if(prp_Lthird_Party.size()!=prpLthirdParty.size()){
	log.info(&quot;数据库中的prp_Lthird_Party数量与报文中的prpLthirdParty数量不相等,prp_Lthird_Party.size=&quot;+prp_Lthird_Party.size()+&quot;prpLthirdParty.size=&quot;+prpLthirdParty.size());
}else{
	for(int i=0;i&lt;prp_Lthird_Party.size();i++){
		if(prpLthirdParty.get(0).get(&quot;thirdpartyId&quot;)!=null &amp;&amp; prp_Lthird_Party.get(0).get(&quot;id&quot;)!=null){
			if(!(prpLthirdParty.get(0).get(&quot;thirdpartyId&quot;).equals(prp_Lthird_Party.get(0).get(&quot;id&quot;)))){
//				Failure = true;
//				FailureMessage = &quot;返回报文中的 id 与数据库不一致！&quot;;
				log.info(&quot;返回报文中的 id 与数据库不一致&quot;);
			}else{
				if(prpLthirdParty.get(0).get(&quot;registNo&quot;)!=null &amp;&amp; prp_Lthird_Party.get(0).get(&quot;regist_no&quot;)!=null){
					if(!(prpLthirdParty.get(0).get(&quot;registNo&quot;).equals(prp_Lthird_Party.get(0).get(&quot;regist_no&quot;)))){
						Failure = true;
						FailureMessage = &quot;返回报文中的 报案号registNo 与数据库不一致！&quot;;
						log.info(&quot;返回报文中的 报案号registNo 与数据库不一致&quot;);
					}
				}
				if(prpLthirdParty.get(0).get(&quot;lossItemType&quot;)!=null &amp;&amp; prp_Lthird_Party.get(0).get(&quot;loss_item_type&quot;)!=null){
					if(!(prpLthirdParty.get(0).get(&quot;lossItemType&quot;).equals(prp_Lthird_Party.get(0).get(&quot;loss_item_type&quot;)))){
						Failure = true;
						FailureMessage = &quot;返回报文中的 损失项目类型lossItemType 与数据库不一致！&quot;;
						log.info(&quot;返回报文中的 损失项目类型lossItemType 与数据库不一致&quot;);
					}
				}
				if(prpLthirdParty.get(0).get(&quot;licenseNo&quot;)!=null &amp;&amp; prp_Lthird_Party.get(0).get(&quot;license_no&quot;)!=null){
					if(!(prpLthirdParty.get(0).get(&quot;licenseNo&quot;).equals(prp_Lthird_Party.get(0).get(&quot;license_no&quot;)))){
						Failure = true;
						FailureMessage = &quot;返回报文中的 车牌号licenseNo 与数据库不一致！&quot;;
						log.info(&quot;返回报文中的 车牌号licenseNo 与数据库不一致&quot;);
					}
				}
			}
		}
	}
}

</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
